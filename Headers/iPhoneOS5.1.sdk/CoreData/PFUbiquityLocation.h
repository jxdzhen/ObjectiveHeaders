/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSArray, NSString;

__attribute__((visibility("hidden")))
@interface PFUbiquityLocation : XXUnknownSuperclass {
@private
	PFUbiquityLocation* _ubiquityRootLocation;
	NSString* _ubiquityRootLocationPath;
	int _ubiquityLocationType;
	NSString* _exportingPeerID;
	NSString* _storeName;
	NSString* _modelVersionHash;
	NSString* _filename;
	NSArray* _otherPathComponents;
	unsigned _hash;
}
@property(readonly, assign, nonatomic) NSString* exportingPeerID;	// @synthesize=_exportingPeerID
@property(readonly, assign, nonatomic) NSString* filename;	// @synthesize=_filename
@property(readonly, assign, nonatomic) unsigned hash;	// @synthesize=_hash
@property(readonly, assign, nonatomic) NSString* modelVersionHash;	// @synthesize=_modelVersionHash
@property(readonly, assign, nonatomic) NSArray* otherPathComponents;	// @synthesize=_otherPathComponents
@property(readonly, assign, nonatomic) NSString* storeName;	// @synthesize=_storeName
@property(readonly, assign, nonatomic) int ubiquityLocationType;	// @synthesize=_ubiquityLocationType
@property(readonly, assign, nonatomic) PFUbiquityLocation* ubiquityRootLocation;
@property(readonly, assign, nonatomic) NSString* ubiquityRootLocationPath;	// @synthesize=_ubiquityRootLocationPath
@property(readonly, assign, nonatomic) BOOL usesBaselineDirectory;
@property(readonly, assign, nonatomic) BOOL usesBaselineStagingDirectory;
@property(readonly, assign, nonatomic) BOOL usesCurrentBaselineDirectory;
@property(readonly, assign, nonatomic) BOOL usesStagingLogDirectory;
@property(readonly, assign, nonatomic) BOOL usesTemporaryLogDirectory;
+(id)createArrayOfSubLocationsAtLocation:(id)location error:(id*)error;
+(id)createBaselineLocation:(int)location forStoreName:(id)storeName andModelVersionHash:(id)hash withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createBaselineStagingLocation:(int)location forStoreName:(id)storeName modelVersionHash:(id)hash andFilename:(id)filename withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createCurrentBaselineLocation:(int)location forStoreName:(id)storeName andModelVersionHash:(id)hash forFileNamed:(id)fileNamed withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createMapOfLocationsForOldManagedObjectModel:(id)oldManagedObjectModel andNewManagedObjectModel:(id)model inUbiquityPeerStoreLocation:(id)ubiquityPeerStoreLocation;
+(id)createMetadataPeerLocationForLocalPeerID:(id)localPeerID andUbiquityRootLocation:(id)location;
+(id)createMetadataPeerStoreLocationForLocalPeerID:(id)localPeerID storeName:(id)name andUbiquityRootLocation:(id)location;
+(id)createMetadataRootLocationForUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createMetadataStoreLocationForLocalPeerID:(id)localPeerID andUbiquityRootLocation:(id)location;
+(id)createMetadataUUIDLocationForLocalPeerID:(id)localPeerID storeName:(id)name UUID:(id)uuid andUbiquityRootLocation:(id)location;
+(id)createPeerRootLocationForPeerID:(id)peerID withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createPeerStoreLocationForPeerID:(id)peerID andStoreName:(id)name withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createPeerStoreVersionLocationForPeerID:(id)peerID storeName:(id)name andModelVersionHash:(id)hash withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createStagingPeerStoreVersionLocationForExportingPeerID:(id)exportingPeerID storeName:(id)name andModelVersionHash:(id)hash withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createStagingTransactionLogLocationFromTransactionLogLocation:(id)transactionLogLocation;
+(id)createTemporaryTransactionLogLocationFromTransactionLogLocation:(id)transactionLogLocation;
+(id)createTransactionLogLocationForPeerID:(id)peerID storeName:(id)name modelVersionHash:(id)hash logFilename:(id)filename andUbiquityRootLocation:(id)location;
+(id)createTransactionLogLocationFromTemporaryOrStagingLogLocation:(id)temporaryOrStagingLogLocation;
+(id)createUbiquityExternalDataReferenceFileLocationForUUID:(id)uuid andLog:(id)log;
+(id)createUbiquityExternalDataReferenceFileLocationForUUID:(id)uuid andStore:(id)store;
+(id)createUbiquityExternalDataReferenceFileLocationForUUID:(id)uuid storeName:(id)name andUbiquityRootLocation:(id)location;
+(id)createUbiquityLocationForPath:(id)path withUbiquityRootPath:(id)ubiquityRootPath;
+(id)createUbiquityLocationForRootPath:(id)rootPath;
+(id)createUbiquityLocationForRootURL:(id)rootURL;
+(id)createUbiquityLocationForSubpath:(id)subpath ofPath:(id)path withUbiquityRootPath:(id)ubiquityRootPath;
+(id)createUbiquityLocationForSubpath:(id)subpath ofUbiquityRootPath:(id)ubiquityRootPath;
+(id)createUbiquityLocationForURL:(id)url withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createUbiquityLocationForURL:(id)url withUbiquityRootPath:(id)ubiquityRootPath;
+(id)createUbiquityLocationForURL:(id)url withUbiquityRootURL:(id)ubiquityRootURL;
+(id)createUbiquityPeerReceiptFileLocationForPeerWithID:(id)anId storeName:(id)name andModelVersionHash:(id)hash withUbiquityRootLocation:(id)ubiquityRootLocation;
+(id)createVersionHashStringForModel:(id)model;
+(BOOL)isUbiquityLocationPath:(id)path equalToPath:(id)path2;
+(id)pathByTruncatingBeforeLibraryMobileDocuments:(id)documents;
-(id)init;
-(id)initWithUbiquityRootPath:(id)ubiquityRootPath;
-(id)initWithUbiquityRootURL:(id)ubiquityRootURL;
-(id)copyWithZone:(NSZone*)zone;
-(id)createFullPath;
-(id)createFullURL;
-(void)dealloc;
-(id)description;
// declared property getter: -(id)exportingPeerID;
-(BOOL)fileExistsAtLocation;
// declared property getter: -(id)filename;
// declared property getter: -(unsigned)hash;
-(BOOL)isEqual:(id)equal;
-(BOOL)isEqualToURL:(id)url;
// declared property getter: -(id)modelVersionHash;
// declared property getter: -(id)otherPathComponents;
-(void)setExportingPeerID:(id)anId;
-(void)setFilename:(id)filename;
-(void)setHash:(unsigned)hash;
-(void)setModelVersionHash:(id)hash;
-(void)setOtherPathComponents:(id)components;
-(void)setStoreName:(id)name;
-(void)setUbiquityLocationType:(int)type;
-(void)setUbiquityRootLocation:(id)location;
-(void)setUbiquityRootLocationPath:(id)path;
// declared property getter: -(id)storeName;
// declared property getter: -(int)ubiquityLocationType;
// declared property getter: -(id)ubiquityRootLocation;
// declared property getter: -(id)ubiquityRootLocationPath;
-(void)updateHash;
// declared property getter: -(BOOL)usesBaselineDirectory;
// declared property getter: -(BOOL)usesBaselineStagingDirectory;
// declared property getter: -(BOOL)usesCurrentBaselineDirectory;
// declared property getter: -(BOOL)usesStagingLogDirectory;
// declared property getter: -(BOOL)usesTemporaryLogDirectory;
@end

