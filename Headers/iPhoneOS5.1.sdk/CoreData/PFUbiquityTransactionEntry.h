/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "PFUbiquityTransactionEntry.h"
#import "NSManagedObject.h"

@class PFUbiquityPeer, NSURL, NSString, NSNumber, NSDate, PFUbiquityStoreMetadata;

__attribute__((visibility("hidden")))
@interface PFUbiquityTransactionEntry : NSManagedObject {
}
@property(retain, nonatomic) PFUbiquityPeer* actingPeer;	// @dynamic
@property(retain, nonatomic) NSString* globalIDStr;	// @dynamic
@property(retain, nonatomic) NSString* knowledgeVectorString;	// @dynamic
@property(retain, nonatomic) NSString* localIDStr;	// @dynamic
@property(retain, nonatomic) PFUbiquityStoreMetadata* storeMetadata;	// @dynamic
@property(retain, nonatomic) NSDate* transactionDate;	// @dynamic
@property(retain, nonatomic) NSString* transactionLogFilename;	// @dynamic
@property(retain, nonatomic) NSNumber* transactionNumber;	// @dynamic
@property(retain, nonatomic) NSNumber* transactionTypeNum;	// @dynamic
@end

@interface PFUbiquityTransactionEntry (UbiquityMethods)
@property(readonly, assign) NSURL* transactionLogURL;
@property(assign) int transactionType;
+(BOOL)canMergeKnowledgeVector:(id)vector withKnowledgeVector:(id)knowledgeVector;
+(id)createKnowledgeVectorByAddingKnowledgeVector:(id)vector toKnowledgeVector:(id)knowledgeVector;
+(id)createKnowledgeVectorStringFromPeerDictionary:(id)peerDictionary;
+(id)createPeerCodeDictionaryFromVector:(id)vector;
+(id)createSumForKnowlegeVectorString:(id)knowlegeVectorString;
+(id)createTransactionEntriesForCompressedObjectIDs:(id)compressedObjectIDs withTransactionType:(int)transactionType withImportContext:(id)importContext;
+(id)newTransactionEntryForObjectWithCompressedGlobalID:(id)compressedGlobalID withTransactionType:(int)transactionType importContext:(id)context;
+(id)transactionEntriesAfterPeerState:(id)state forStoreName:(id)storeName inManagedObjectContext:(id)managedObjectContext;
+(id)transactionEntriesForGlobalIDStrings:(id)globalIDStrings beforePeerState:(id)state inManagedObjectContext:(id)managedObjectContext;
+(id)transactionEntriesForPeerID:(id)peerID beforeTransacationNumber:(id)number forStoreNamed:(id)storeNamed inManagedObjectContext:(id)managedObjectContext;
+(id)transactionEntriesForPeerID:(id)peerID withTransactionNumber:(id)transactionNumber inManagedObjectContext:(id)managedObjectContext;
+(id)transactionEntriesMatchingGlobalObjectID:(id)anId inManagedObjectContext:(id)managedObjectContext;
+(id)transactionEntriesMatchingLocalObjectID:(id)anId inManagedObjectContext:(id)managedObjectContext;
+(id)transactionEntryForGlobalIDString:(id)globalIDString withActingPeerID:(id)actingPeerID atTransactionNumber:(id)transactionNumber inManagedObjectContext:(id)managedObjectContext;
-(id)initAndInsertIntoManagedObjectContext:(id)context;
// declared property setter: -(void)setTransactionType:(int)type;
// declared property getter: -(id)transactionLogURL;
// declared property getter: -(int)transactionType;
@end

