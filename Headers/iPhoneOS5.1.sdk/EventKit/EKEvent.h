/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import "EKCalendarItem.h"
#import "EventKit-Structs.h"

@class EKRecurrenceRule, EKParticipant, NSDate, NSString, NSNumber, EKCalendarDate;

@interface EKEvent : EKCalendarItem {
@private
	EKCalendarDate* _occurrenceStartDate;
	EKCalendarDate* _occurrenceEndDate;
	BOOL _occurrenceIsAllDay;
	EKCalendarDate* _originalOccurrenceStartDate;
	EKCalendarDate* _originalOccurrenceEndDate;
	NSNumber* _originalOccurrenceIsAllDay;
}
@property(assign, nonatomic, getter=isAllDay) BOOL allDay;
@property(assign, nonatomic) int availability;
@property(readonly, assign, nonatomic) int birthdayPersonID;
@property(copy, nonatomic) NSDate* endDate;
@property(readonly, assign, nonatomic) NSString* eventIdentifier;
@property(readonly, assign, nonatomic) BOOL isDetached;
@property(copy, nonatomic) EKCalendarDate* occurrenceEndDate;	// @synthesize=_occurrenceEndDate
@property(assign, nonatomic) BOOL occurrenceIsAllDay;	// @synthesize=_occurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate* occurrenceStartDate;	// @synthesize=_occurrenceStartDate
@property(readonly, assign, nonatomic) EKParticipant* organizer;
@property(copy, nonatomic) EKCalendarDate* originalOccurrenceEndDate;	// @synthesize=_originalOccurrenceEndDate
@property(copy, nonatomic) NSNumber* originalOccurrenceIsAllDay;	// @synthesize=_originalOccurrenceIsAllDay
@property(copy, nonatomic) EKCalendarDate* originalOccurrenceStartDate;	// @synthesize=_originalOccurrenceStartDate
@property(retain, nonatomic) EKRecurrenceRule* recurrenceRule;
@property(copy, nonatomic) NSDate* startDate;
@property(readonly, assign, nonatomic) int status;
+(id)eventWithEventStore:(id)eventStore;
-(id)init;
-(id)initWithEventStore:(id)eventStore;
-(id)initWithPersistentObject:(id)persistentObject;
-(id)initWithPersistentObject:(id)persistentObject occurrenceDate:(id)date;
-(BOOL)_cancelWithSpan:(int)span error:(id*)error;
-(BOOL)_checkStartDateConstraintAgainstDate:(XXStruct_lQVxyC)date timeZone:(id)zone error:(id*)error;
-(BOOL)_deleteWithSpan:(int)span error:(id*)error;
-(void)_detachWithStartDate:(id)startDate newStartDate:(id)date future:(BOOL)future;
-(id)_effectiveTimeZone;
-(BOOL)_isAllDay;
-(BOOL)_isInitialOccurrenceDate:(id)date;
-(BOOL)_occurrenceExistsOnDate:(double)date timeZone:(id)zone;
-(int)_parentParticipationStatus;
-(id)_persistentEvent;
-(void)_sendModifiedNote;
-(BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)span;
-(BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)recurrenceInterval;
-(BOOL)_validateDatesAndRecurrencesGivenSpan:(int)span error:(id*)error;
-(BOOL)_validateDurationConstrainedToRecurrenceInterval;
-(int)alarmCount;
-(BOOL)allowsAlarmModifications;
-(BOOL)allowsCalendarModifications;
-(BOOL)allowsRecurrenceModifications;
-(id)attachments;
-(int)attendeeCount;
-(id)attendees;
// declared property getter: -(int)availability;
// declared property getter: -(int)birthdayPersonID;
-(id)birthdayTitleWithAddressBook:(void*)addressBook;
-(BOOL)canBeRespondedTo;
-(BOOL)canDetachSingleOccurrence;
-(BOOL)canMoveToCalendar:(id)calendar fromCalendar:(id)calendar2 error:(id*)error;
-(BOOL)canSetAvailability;
-(void)clearReadState;
-(BOOL)commitWithSpan:(int)span error:(id*)error;
-(id)committedValueForKey:(id)key;
-(int)compareStartDateWithEvent:(id)event;
-(void)dealloc;
-(id)description;
-(void)didCommit;
-(id)dirtyPropertiesToSkip;
-(double)duration;
-(id)endCalendarDate;
// declared property getter: -(id)endDate;
-(XXStruct_lQVxyC)endDateGr;
-(XXStruct_lQVxyC)endDatePinnedForAllDay;
// declared property getter: -(id)eventIdentifier;
-(id)eventStore;
-(id)exportToICS;
-(id)externalId;
-(id)externalURL;
-(BOOL)hasSelfAttendee;
-(unsigned)hash;
-(id)initialEndDate;
-(id)initialStartDate;
// declared property getter: -(BOOL)isAllDay;
// declared property getter: -(BOOL)isDetached;
-(BOOL)isDirtyIgnoringCalendar;
-(BOOL)isEndDateDirty;
-(BOOL)isEqual:(id)equal;
-(BOOL)isStartDateDirty;
-(BOOL)isStatusDirty;
-(BOOL)isTentative;
-(unsigned)modifiedProperties;
-(BOOL)needsOccurrenceCacheUpdate;
-(id)occurrenceDate;
// declared property getter: -(id)occurrenceEndDate;
// declared property getter: -(BOOL)occurrenceIsAllDay;
// declared property getter: -(id)occurrenceStartDate;
// declared property getter: -(id)organizer;
// declared property getter: -(id)originalOccurrenceEndDate;
// declared property getter: -(id)originalOccurrenceIsAllDay;
// declared property getter: -(id)originalOccurrenceStartDate;
-(int)participationStatus;
-(int)pendingParticipationStatus;
-(unsigned)readState;
// declared property getter: -(id)recurrenceRule;
-(BOOL)refresh;
-(BOOL)removeWithSpan:(int)span error:(id*)error;
-(BOOL)requiresDetach;
-(id)responseComment;
-(BOOL)responseMustApplyToAll;
-(void)revert;
-(void)rollback;
// declared property setter: -(void)setAllDay:(BOOL)day;
// declared property setter: -(void)setAvailability:(int)availability;
// declared property setter: -(void)setEndDate:(id)date;
-(void)setModifiedProperties:(unsigned)properties;
-(void)setNeedsOccurrenceCacheUpdate:(BOOL)update;
// declared property setter: -(void)setOccurrenceEndDate:(id)date;
// declared property setter: -(void)setOccurrenceIsAllDay:(BOOL)day;
// declared property setter: -(void)setOccurrenceStartDate:(id)date;
// declared property setter: -(void)setOriginalOccurrenceEndDate:(id)date;
// declared property setter: -(void)setOriginalOccurrenceIsAllDay:(id)day;
// declared property setter: -(void)setOriginalOccurrenceStartDate:(id)date;
-(void)setParticipationStatus:(int)status;
-(void)setReadState:(unsigned)state;
// declared property setter: -(void)setRecurrenceRule:(id)rule;
-(void)setResponseComment:(id)comment;
// declared property setter: -(void)setStartDate:(id)date;
-(void)setTimeZone:(id)zone;
-(id)startCalendarDate;
// declared property getter: -(id)startDate;
-(XXStruct_lQVxyC)startDateGr;
-(XXStruct_lQVxyC)startDatePinnedForAllDay;
// declared property getter: -(int)status;
-(id)uniqueId;
-(BOOL)validateWithSpan:(int)span error:(id*)error;
@end

