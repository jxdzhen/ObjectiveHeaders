/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MPMediaLibraryDataProviderPrivate.h"
#import "MediaPlayer-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSArray, ML3MusicLibrary, NSString, NSSet;

@interface MPMediaLibraryDataProviderML3 : XXUnknownSuperclass <MPMediaLibraryDataProviderPrivate> {
	dispatch_queue_s* _backgroundTaskQueue;
	unsigned _backgroundTask;
	unsigned _backgroundTaskCount;
	ML3MusicLibrary* _library;
}
@property(readonly, assign, nonatomic) BOOL isGeniusEnabled;
@property(retain, nonatomic) ML3MusicLibrary* library;	// @synthesize=_library
@property(readonly, assign, nonatomic) NSString* name;
@property(readonly, assign, nonatomic) NSArray* preferredAudioLanguages;
@property(readonly, assign, nonatomic) NSArray* preferredSubtitleLanguages;
@property(readonly, assign, nonatomic) NSSet* propertiesToCache;
@property(readonly, assign, nonatomic) BOOL requiresAuthentication;
@property(readonly, assign, nonatomic) NSString* syncValidity;
@property(readonly, assign, nonatomic) NSString* uniqueIdentifier;
+(id)_unadjustedValueForMPProperty:(id)mpproperty withDefaultValue:(id)defaultValue;
-(id)initWithLibrary:(id)library;
-(void)_displayValuesDidChange:(id)_displayValues;
-(void)_dynamicPropertiesDidChange:(id)_dynamicProperties;
-(void)_libraryContentsDidChange:(id)_libraryContents;
-(void)_loadEntitiesUsingFetchRequest:(id)request entityQuery:(id)query writeBlock:(id)block;
-(void)_loadProperties:(id)properties ofEntityWithIdentifier:(long long)identifier ML3EntityClass:(Class)aClass completionBlock:(id)block;
-(void)_loadValueForAggregateFunction:(id)aggregateFunction entityClass:(Class)aClass property:(id)property query:(id)query completionBlock:(id)block;
-(BOOL)_removeEntitiesWithIdentifiers:(long long*)identifiers count:(unsigned)count entityClass:(Class)aClass;
-(void)_syncGenerationDidChange:(id)_syncGeneration;
-(void)addItemWithIdentifier:(long long)identifier toPlaylistWithIdentifier:(long long)identifier2 completionBlock:(id)block;
-(void)addItemsWithIdentifiers:(long long*)identifiers count:(unsigned)count toPlaylistWithIdentifier:(long long)identifier completionBlock:(id)block;
-(long long)addPlaylistWithValuesForProperties:(id)properties;
-(id)adjustedValueForMPProperty:(id)mpproperty ofEntity:(id)entity withDefaultValue:(id)defaultValue;
-(void)dealloc;
-(void)downloadItemWithIdentifier:(long long)identifier completionHandler:(id)handler;
-(void)enumerateCollectionIdentifiersForQueryCriteria:(id)queryCriteria cancelBlock:(id)block usingBlock:(id)block3;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)anchor itemBlock:(id)block collectionBlock:(id)block3;
-(void)enumerateItemIdentifiersForQueryCriteria:(id)queryCriteria cancelBlock:(id)block usingBlock:(id)block3;
-(BOOL)hasGeniusMixes;
-(BOOL)hasMediaOfType:(int)type;
-(BOOL)itemExistsWithPersistentID:(unsigned long long)persistentID;
-(id)lastModifiedDate;
// declared property getter: -(id)library;
-(void)loadBestArtworkImageDataForSize:(CGSize)size ofItemWithIdentifier:(long long)identifier completionBlock:(id)block;
-(void)loadBestTimedArtworkImageDataForSize:(CGSize)size ofItemWithIdentifier:(long long)identifier atPlaybackTime:(double)playbackTime completionBlock:(id)block;
-(void)loadCollectionsUsingFetchRequest:(id)request;
-(void)loadItemsUsingFetchRequest:(id)request;
-(void)loadProperties:(id)properties ofCollectionWithIdentifier:(long long)identifier completionBlock:(id)block;
-(void)loadProperties:(id)properties ofItemWithIdentifier:(long long)identifier completionBlock:(id)block;
-(void)loadQueryCriteria:(id)criteria hasCollectionsWithCompletionBlock:(id)completionBlock;
-(void)loadQueryCriteria:(id)criteria hasItemsWithCompletionBlock:(id)completionBlock;
-(void)loadValueForAggregateFunction:(id)aggregateFunction onCollectionsForProperty:(id)property queryCriteria:(id)criteria completionBlock:(id)block;
-(void)loadValueForAggregateFunction:(id)aggregateFunction onItemsForProperty:(id)property queryCriteria:(id)criteria completionBlock:(id)block;
-(void)moveItemFromIndex:(unsigned)index toIndex:(unsigned)index2 inPlaylistWithIdentifier:(long long)identifier completionBlock:(id)block;
// declared property getter: -(id)name;
-(void)performBackgroundTaskWithBlock:(id)block;
-(BOOL)performTransactionWithBlock:(id)block;
-(BOOL)playlistExistsWithPersistentID:(unsigned long long)persistentID;
-(long long)playlistGeneration;
// declared property getter: -(id)preferredAudioLanguages;
// declared property getter: -(id)preferredSubtitleLanguages;
-(void)removeAllItemsInPlaylistWithIdentifier:(long long)identifier;
-(void)removeItemsWithIdentifiers:(long long*)identifiers atFilteredIndexes:(id)filteredIndexes inPlaylistWithIdentifier:(long long)identifier completionBlock:(id)block;
-(BOOL)removeItemsWithIdentifiers:(long long*)identifiers count:(unsigned)count;
-(BOOL)removePlaylistWithIdentifier:(long long)identifier;
// declared property setter: -(void)setLibrary:(id)library;
-(BOOL)setValue:(id)value forProperty:(id)property ofItemWithIdentifier:(long long)identifier;
-(BOOL)setValue:(id)value forProperty:(id)property ofPlaylistWithIdentifier:(long long)identifier;
-(unsigned long long)syncGenerationID;
// declared property getter: -(id)syncValidity;
-(double)timestampForAppliedUbiquitousBookmarkKey:(id)appliedUbiquitousBookmarkKey;
// declared property getter: -(id)uniqueIdentifier;
-(void)updateUbiquitousBookmarksWithKey:(id)key bookmarkMediaValue:(id)value timestamp:(double)timestamp;
-(BOOL)writable;
@end

