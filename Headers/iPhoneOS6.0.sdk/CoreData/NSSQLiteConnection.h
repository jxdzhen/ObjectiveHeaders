/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreData.framework/CoreData
 */

#import "CoreData-Structs.h"
#import "NSSQLConnection.h"

@class NSSQLiteStatement, NSString, NSSQLEntity, NSMutableSet, NSMutableDictionary;

__attribute__((visibility("hidden")))
@interface NSSQLiteConnection : NSSQLConnection {
@private
	sqlite3* _db;
	sqlite3_stmt* _vmstatement;
	int _rowsProcessedCount;
	unsigned _lastEntityKey;
	NSSQLEntity* _finalEntity;
	NSSQLEntity* _lastEntity;
	sqlite3_stmt* _fetchPKStatement;
	sqlite3_stmt* _updatePKStatement;
	NSSQLiteStatement* _beginStatement;
	NSSQLiteStatement* _commitStatement;
	NSSQLiteStatement* _rollbackStatement;
	NSMutableSet* _vmCachedStatements;
	NSMutableDictionary* _pragmaSettings;
	CFDictionaryRef _cachedEntityUpdateStatements;
	double _timeOutOption;
	void* _extraBuffersForRegisteredFunctions[5];
	NSString* _dbPathRegisteredWithBackupd;
	long long _vacuumTracker;
	sqliteConnectionFlags _sqliteConnectionFlags;
	unsigned long long _debugInode;
}
+(void)__INode_Changed_AllThatIsLeftToUsIsHonor__;
+(const char*)_databaseOpenURLStringForURL:(id)url;
+(BOOL)_destroyPersistentStoreAtURL:(id)url options:(id)options error:(id*)error;
+(BOOL)_replacePersistentStoreAtURL:(id)url destinationOptions:(id)options withPersistentStoreFromURL:(id)url3 sourceOptions:(id)options4 error:(id*)error;
+(void)_setDebugFlags:(int)flags;
+(void)initialize;
+(int)readMagicWordFromPath:(const char*)path;
-(id)initWithAdapter:(id)adapter;
-(id)_adapter;
-(id)_beginPowerAssertionWithAssert:(unsigned*)anAssert;
-(void)_bindVariablesWithDeletedRow:(id)deletedRow;
-(void)_bindVariablesWithInsertedRow:(id)insertedRow;
-(void)_bindVariablesWithUpdatedRow:(id)updatedRow andOriginalRow:(id)row forDeltasMask:(CFBitVectorRef)deltasMask;
-(void**)_buffersForRegisteredFunctions;
-(void)_clearBindVariablesForInsertedRow;
-(void)_clearBindVariablesForUpdateStatement:(id)updateStatement forDeltasMask:(CFBitVectorRef)deltasMask;
-(void)_clearCachedStatements;
-(void)_clearOtherStatements;
-(void)_clearTransactionCaches;
-(void)_configureAutoVacuum;
-(void)_configureIntegrityCheck;
-(void)_configurePageSize;
-(void)_configurePragmaOptions:(int)options;
-(void)_configureSynchronousMode;
-(void)_configureUbiquityMetadataTable;
-(void)_endPowerAssertionWithAssert:(unsigned)anAssert andApp:(id)app;
-(void)_ensureDatabaseOpen;
-(void)_ensureNoFetchInProgress;
-(void)_ensureNoStatementPrepared;
-(void)_ensureNoTransactionOpen;
-(void)_executeSQLString:(id)string;
-(long long)_fetchMaxPrimaryKeyForEntity:(id)entity;
-(void)_finalizeStatement;
-(void)_forceDisconnectOnError;
-(long long)_getCurrentAutoVacuumValue;
-(BOOL)_hasTableWithName:(id)name;
-(id)_newValueForColumn:(id)column atIndex:(unsigned)index inStatement:(sqlite3_stmt*)statement;
-(void)_performPostSaveTasks;
-(void)_registerExtraFunctions;
-(int)_rowsChangedByLastExecute;
-(void)_setupVacuumIfNecessary;
-(sqlite3_stmt*)_vmstatement;
-(void)addPeerRange:(id)range;
-(void)addPeerRangeForPeerID:(id)peerID entityName:(id)name rangeStart:(id)start rangeEnd:(id)end peerRangeStart:(id)start5 peerRangeEnd:(id)end6;
-(id)allPeerRanges;
-(void)beginTransaction;
-(void)cacheCurrentDBStatementOn:(id)on;
-(void)cacheUpdateStatement:(id)statement forEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;
-(id)cachedUpdateStatementForEntity:(id)entity andDeltasMask:(CFBitVectorRef)mask;
-(BOOL)canConnect;
-(void)commitTransaction;
-(void)connect;
-(id)createMapOfEntityNameToPKMaxForEntities:(id)entities;
-(id)createMapOfEntityNameToPKMaxForEntitiesFromPKTable:(id)pktable;
-(id)createMapOfEntityNameToPKMaxForEntitiesFromUBRangeTable:(id)ubrangeTable;
-(BOOL)databaseIsEmpty;
-(void)dealloc;
-(void)deleteCorrelation:(id)correlation;
-(void)deleteRow:(id)row;
-(id)describeResults;
-(void)disconnect;
-(void)endFetch;
-(void)endPrimaryKeyGeneration;
-(void)execute;
-(long long)fetchMaxPrimaryKeyForEntity:(id)entity;
-(int)fetchResultSet:(void*)set usingFetchPlan:(id)plan;
-(id)fetchTableCreationSQL;
-(id)fetchTableNames;
-(id)fetchUbiqiutyKnowledgeVector;
-(void)finalize;
-(long long)generatePrimaryKeysForEntity:(id)entity batch:(unsigned)batch;
-(void)handleCorruptedDB:(id)db;
-(BOOL)hasMetadataTable;
-(BOOL)hasPrimaryKeyTable;
-(void)insertCorrelation:(id)correlation;
-(void)insertRow:(id)row;
-(BOOL)isFetchInProgress;
-(BOOL)isLocalFS;
-(BOOL)isOpen;
-(id)newFetchedArray;
-(BOOL)performIntegrityCheck;
-(void)prepareForPrimaryKeyGeneration;
-(void)prepareSQLStatement:(id)statement;
-(CFArrayRef)rawIntegerRowsForSQL:(id)sql;
-(void)releaseSQLStatement;
-(void)resetSQLStatement;
-(void)rollbackTransaction;
-(void)setExclusiveLockingMode:(BOOL)mode;
-(void)setUbiquityTableValue:(id)value forKey:(id)key;
-(id)ubiquityTableKeysAndValues;
-(id)ubiquityTableValueForKey:(id)key;
-(void)updateCorrelation:(id)correlation;
-(void)updateRow:(id)row;
-(void)updateUbiquityKnowledgeForPeerWithID:(id)anId andTransactionNumber:(id)number;
-(void)updateUbiquityKnowledgeVector:(id)vector;
-(void)willCreateSchema;
@end

