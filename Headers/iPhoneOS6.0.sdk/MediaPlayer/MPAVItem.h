/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MediaPlayer-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class MPMediaItem, NSURL, NSArray, MPAVController, MPImageCache, MPAlternateTracks, NSObject, NSData, MPQueueFeeder, NSString, AVPlayerItem, AVAsset;
@protocol OS_dispatch_queue;

@interface MPAVItem : XXUnknownSuperclass {
@private
	AVPlayerItem* _avPlayerItem;
@protected
	AVAsset* _asset;
	NSObject<OS_dispatch_queue>* _assetQueue;
	BOOL _didAttemptToLoadAsset;
	BOOL _isAssetLoaded;
	MPQueueFeeder* _feeder;
	MPAVController* _player;
	float _soundCheckVolumeNormalization;
	NSArray* _chapterTimeMarkers;
	NSArray* _artworkTimeMarkers;
	NSArray* _urlTimeMarkers;
	NSArray* _closedCaptionTimeMarkers;
	MPAlternateTracks* _alternateTracks;
	double _cachedDuration;
	double _cachedPlayableDuration;
	NSArray* _cachedSeekableTimeRanges;
	double _seekableTimeRangesCacheTime;
	unsigned _type;
	float _defaultPlaybackRate;
	unsigned _indexInQueueFeeder;
	unsigned _advancedDuringPlayback : 1;
	unsigned _handledFinishTime : 1;
	unsigned _hasPlayedThisSession : 1;
	unsigned _wasCountedAsSkipped : 1;
	unsigned _isStreamable : 2;
	unsigned _watchingAttributes : 1;
	unsigned _lyricsAvailable : 1;
	unsigned _timeMarkersNeedLoading : 1;
}
@property(readonly, assign, nonatomic) NSString* album;
@property(readonly, assign, nonatomic) NSString* albumArtist;
@property(readonly, assign, nonatomic) unsigned albumTrackCount;
@property(readonly, assign, nonatomic) unsigned albumTrackNumber;
@property(readonly, assign, nonatomic) BOOL allowsEQ;
@property(readonly, assign, nonatomic) MPAlternateTracks* alternateTracks;	// @synthesize=_alternateTracks
@property(readonly, assign, nonatomic) NSString* artist;
@property(readonly, assign, nonatomic) NSData* artworkImageData;
@property(readonly, assign, nonatomic) NSString* artworkMIMEType;
@property(retain, nonatomic) NSArray* artworkTimeMarkers;	// @synthesize=_artworkTimeMarkers
@property(readonly, assign, nonatomic) AVAsset* asset;
@property(retain, nonatomic) AVPlayerItem* avPlayerItem;
@property(readonly, assign, nonatomic) BOOL canSeedGenius;
@property(retain, nonatomic) NSArray* chapterTimeMarkers;	// @synthesize=_chapterTimeMarkers
@property(retain, nonatomic) NSArray* closedCaptionTimeMarkers;
@property(readonly, assign, nonatomic) NSString* composer;
@property(readonly, assign, nonatomic) unsigned countForQueueFeeder;
@property(readonly, assign, nonatomic) double currentTimeDisplayOverride;
@property(readonly, assign, nonatomic) int customAVEQPreset;
@property(assign, nonatomic) float defaultPlaybackRate;	// @synthesize=_defaultPlaybackRate
@property(readonly, assign, nonatomic) unsigned discCount;
@property(readonly, assign, nonatomic) unsigned discNumber;
@property(readonly, assign, nonatomic) NSString* displayableText;
@property(readonly, assign, nonatomic) BOOL displayableTextLoaded;
@property(readonly, assign, nonatomic) XXStruct_pwHToB duration;
@property(readonly, assign, nonatomic) double durationFromExternalMetadata;
@property(readonly, assign, nonatomic) double durationIfAvailable;
@property(readonly, assign, nonatomic) BOOL durationIsValid;
@property(assign, nonatomic) MPQueueFeeder* feeder;	// @synthesize=_feeder
@property(assign, nonatomic) XXStruct_pwHToB forwardPlaybackEndTime;
@property(readonly, assign, nonatomic) NSString* genre;
@property(readonly, assign, nonatomic) BOOL hasDataForItemArtwork;
@property(readonly, assign, nonatomic) BOOL hasDisplayableText;
@property(assign, nonatomic) BOOL hasPlayedThisSession;
@property(readonly, assign, nonatomic) MPImageCache* imageCache;
@property(assign, nonatomic) unsigned indexInQueueFeeder;	// @synthesize=_indexInQueueFeeder
@property(assign) BOOL isAssetLoaded;	// @synthesize=_isAssetLoaded
@property(readonly, assign, nonatomic) NSString* lyrics;
@property(readonly, assign, nonatomic) NSString* mainTitle;
@property(readonly, assign, nonatomic) MPMediaItem* mediaItem;
@property(readonly, assign, nonatomic) CGSize naturalSize;
@property(readonly, assign, nonatomic) unsigned long long persistentID;
@property(readonly, assign, nonatomic) double playableDuration;
@property(readonly, assign, nonatomic) double playableDurationIfAvailable;
@property(assign, nonatomic) double playbackCheckpointCurrentTime;
@property(assign, nonatomic) MPAVController* player;	// @synthesize=_player
@property(readonly, assign, nonatomic) AVPlayerItem* playerItem;
@property(readonly, assign, nonatomic) NSURL* podcastURL;
@property(readonly, assign, nonatomic) CGSize presentationSize;
@property(assign, nonatomic) float soundCheckVolumeNormalization;	// @synthesize=_soundCheckVolumeNormalization
@property(readonly, assign, nonatomic) int status;
@property(readonly, assign, nonatomic, getter=isStreamable) BOOL streamable;
@property(assign, nonatomic) int subtitleTrackID;
@property(readonly, assign, nonatomic) BOOL supportsRewindAndFastForward15Seconds;
@property(readonly, assign, nonatomic) double timeOfSeekableEnd;
@property(readonly, assign, nonatomic) double timeOfSeekableStart;
@property(readonly, assign, nonatomic) unsigned type;
@property(retain, nonatomic) NSArray* urlTimeMarkers;	// @synthesize=_urlTimeMarkers
@property(readonly, assign, nonatomic) BOOL useEmbeddedChapterData;
@property(readonly, assign, nonatomic) float userRating;
@property(copy, nonatomic) NSString* videoID;
@property(readonly, assign, nonatomic) BOOL wantsSubtitles;
+(id)URLFromPath:(id)path;
+(void)applyVolumeNormalizationForQueuedItems:(id)queuedItems;
+(unsigned)defaultScaleMode;
+(void)setDefaultScaleMode:(unsigned)mode;
-(id)init;
-(id)initWithAsset:(id)asset;
-(id)initWithURL:(id)url;
-(id)initWithURL:(id)url options:(id)options;
-(void)_applicationDidBecomeActive:(id)_application;
-(void)_checkAllowsBlockingDurationCall;
-(void)_closedCaptioningStatusDidChangeNotification:(id)_closedCaptioningStatus;
-(double)_durationFromExternalMetadataIfAvailable;
-(double)_durationInSeconds;
-(id)_imageChapterTrackIDsForAsset:(id)asset;
-(void)_itemAttributeAvailableKey:(id)key;
-(void)_loadAssetAndPlayerItem;
-(void)_loadAssetProperties;
-(void)_loadTimeMarkersAsync;
-(void)_loadTimeMarkersBlocking;
-(double)_playableDurationForLoadedTimeRanges:(id)loadedTimeRanges;
-(void)_realoadEmbeddedTimeMarkers;
-(void)_releaseAllTimeMarkers;
-(id)_seekableTimeRanges;
-(id)_timeMarkerFromMarkers:(id)markers forTime:(double)time;
// declared property getter: -(id)album;
// declared property getter: -(id)albumArtist;
// declared property getter: -(unsigned)albumTrackCount;
// declared property getter: -(unsigned)albumTrackNumber;
// declared property getter: -(BOOL)allowsEQ;
// declared property getter: -(id)alternateTracks;
-(unsigned)alternatesCountForTypes:(unsigned)types;
// declared property getter: -(id)artist;
// declared property getter: -(id)artworkImageData;
// declared property getter: -(id)artworkMIMEType;
-(id)artworkTimeMarkerForTime:(double)time;
// declared property getter: -(id)artworkTimeMarkers;
// declared property getter: -(id)asset;
// declared property getter: -(id)avPlayerItem;
-(id)blockForDirectAVControllerNotificationReferencingItem:(id)directAVControllerNotificationReferencingItem;
// declared property getter: -(BOOL)canSeedGenius;
-(id)chapterTimeMarkerForTime:(double)time;
// declared property getter: -(id)chapterTimeMarkers;
-(id)closedCaptionTimeMarkerForTime:(double)time;
// declared property getter: -(id)closedCaptionTimeMarkers;
// declared property getter: -(id)composer;
// declared property getter: -(unsigned)countForQueueFeeder;
// declared property getter: -(double)currentTimeDisplayOverride;
// declared property getter: -(int)customAVEQPreset;
-(void)dealloc;
// declared property getter: -(float)defaultPlaybackRate;
// declared property getter: -(unsigned)discCount;
// declared property getter: -(unsigned)discNumber;
// declared property getter: -(id)displayableText;
// declared property getter: -(BOOL)displayableTextLoaded;
// declared property getter: -(XXStruct_pwHToB)duration;
// declared property getter: -(double)durationFromExternalMetadata;
// declared property getter: -(double)durationIfAvailable;
-(double)durationInSeconds;
// declared property getter: -(BOOL)durationIsValid;
// declared property getter: -(id)feeder;
-(void)flushNowPlayingCaches;
// declared property getter: -(XXStruct_pwHToB)forwardPlaybackEndTime;
// declared property getter: -(id)genre;
-(BOOL)hasAlternatesForTypes:(unsigned)types;
// declared property getter: -(BOOL)hasDataForItemArtwork;
// declared property getter: -(BOOL)hasDisplayableText;
// declared property getter: -(BOOL)hasPlayedThisSession;
// declared property getter: -(id)imageCache;
-(id)imageCacheRequestWithSize:(CGSize)size time:(double)time;
-(id)imageCacheRequestWithSize:(CGSize)size time:(double)time usePlaceholderAsFallback:(BOOL)fallback;
// declared property getter: -(unsigned)indexInQueueFeeder;
// declared property getter: -(BOOL)isAssetLoaded;
-(BOOL)isAssetURLValid;
-(BOOL)isPlaceholderForItem:(id)item;
// declared property getter: -(BOOL)isStreamable;
-(BOOL)isSupportedDefaultPlaybackSpeed:(unsigned)speed;
-(BOOL)isValidPlayerSubstituteForItem:(id)item;
-(void)loadAssetAndPlayerItem;
-(id)localeForAssetTrack:(id)assetTrack;
-(id)localizedPositionInPlaylistString;
// declared property getter: -(id)lyrics;
// declared property getter: -(id)mainTitle;
// declared property getter: -(id)mediaItem;
// declared property getter: -(CGSize)naturalSize;
-(void)notePlaybackFinishedByHittingEnd;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)path;
// declared property getter: -(unsigned long long)persistentID;
// declared property getter: -(double)playableDuration;
// declared property getter: -(double)playableDurationIfAvailable;
// declared property getter: -(double)playbackCheckpointCurrentTime;
-(float)playbackRateForLevel:(unsigned)level direction:(int)direction paused:(BOOL)paused;
// declared property getter: -(id)player;
// declared property getter: -(id)playerItem;
// declared property getter: -(id)podcastURL;
// declared property getter: -(CGSize)presentationSize;
-(void)reevaluateType;
-(void)resetBookkeeping;
-(float)scanIntervalForLevel:(unsigned)level paused:(BOOL)paused;
-(void)setAlternateAudioTrackID:(int)anId;
// declared property setter: -(void)setArtworkTimeMarkers:(id)markers;
// declared property setter: -(void)setAvPlayerItem:(id)item;
// declared property setter: -(void)setChapterTimeMarkers:(id)markers;
// declared property setter: -(void)setClosedCaptionTimeMarkers:(id)markers;
// declared property setter: -(void)setDefaultPlaybackRate:(float)rate;
// declared property setter: -(void)setFeeder:(id)feeder;
// declared property setter: -(void)setForwardPlaybackEndTime:(XXStruct_pwHToB)time;
// declared property setter: -(void)setHasPlayedThisSession:(BOOL)session;
// declared property setter: -(void)setIndexInQueueFeeder:(unsigned)queueFeeder;
// declared property setter: -(void)setIsAssetLoaded:(BOOL)loaded;
-(void)setOverrideDuration:(double)duration;
// declared property setter: -(void)setPlaybackCheckpointCurrentTime:(double)time;
-(void)setPlaybackFinishedTime:(double)time;
-(void)setPlaybackStoppedTime:(double)time;
// declared property setter: -(void)setPlayer:(id)player;
-(void)setRating:(float)rating;
// declared property setter: -(void)setSoundCheckVolumeNormalization:(float)normalization;
// declared property setter: -(void)setSubtitleTrackID:(int)anId;
// declared property setter: -(void)setUrlTimeMarkers:(id)markers;
-(void)setUserAdvancedDuringPlayback:(BOOL)playback;
-(void)setUserEnabledSubtitles:(BOOL)subtitles;
-(void)setUserSkippedPlayback:(BOOL)playback;
// declared property setter: -(void)setVideoID:(id)anId;
-(void)setupEQPresetWithDefaultPreset:(int)defaultPreset;
-(void)setupPlaybackInfo;
// declared property getter: -(float)soundCheckVolumeNormalization;
// declared property getter: -(int)status;
// declared property getter: -(int)subtitleTrackID;
// declared property getter: -(BOOL)supportsRewindAndFastForward15Seconds;
// declared property getter: -(double)timeOfSeekableEnd;
// declared property getter: -(double)timeOfSeekableStart;
-(id)titlesForTime:(double)time;
// declared property getter: -(unsigned)type;
-(id)url;
-(id)urlTimeMarkerForTime:(double)time;
// declared property getter: -(id)urlTimeMarkers;
// declared property getter: -(BOOL)useEmbeddedChapterData;
// declared property getter: -(float)userRating;
-(BOOL)userSkippedPlayback;
// declared property getter: -(id)videoID;
// declared property getter: -(BOOL)wantsSubtitles;
@end

