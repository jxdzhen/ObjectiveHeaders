/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

#import "AVFoundation-Structs.h"
#import "NSCopying.h"
#import "AVPlayerItem.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSError, AVPlayerItemInternal, NSDate, NSString;

@interface AVPlayerItem : XXUnknownSuperclass <NSCopying> {
@private
	AVPlayerItemInternal* _playerItem;
}
@property(readonly, assign, nonatomic) NSError* error;	// @dynamic
@property(readonly, assign, nonatomic) int status;	// @dynamic
+(BOOL)_forNonStreamingURLsFireKVOForAssetWhenReadyForInspection;
+(BOOL)_forStreamingItemsVendAssetWithFigPlaybackItem;
+(BOOL)automaticallyNotifiesObserversOfAlwaysMonitorsPlayability;
+(BOOL)automaticallyNotifiesObserversOfAsset;
+(BOOL)automaticallyNotifiesObserversOfAudioMix;
+(BOOL)automaticallyNotifiesObserversOfContinuesPlayingDuringPrerollForRateChange;
+(BOOL)automaticallyNotifiesObserversOfContinuesPlayingDuringPrerollForSeek;
+(BOOL)automaticallyNotifiesObserversOfForwardPlaybackEndTime;
+(BOOL)automaticallyNotifiesObserversOfGaplessInfo;
+(BOOL)automaticallyNotifiesObserversOfLimitReadAhead;
+(BOOL)automaticallyNotifiesObserversOfLoadedTimeRanges;
+(BOOL)automaticallyNotifiesObserversOfNonForcedSubtitleDisplayEnabled;
+(BOOL)automaticallyNotifiesObserversOfPlaybackBufferEmpty;
+(BOOL)automaticallyNotifiesObserversOfPlaybackBufferFull;
+(BOOL)automaticallyNotifiesObserversOfPlaybackLikelyToKeepUp;
+(BOOL)automaticallyNotifiesObserversOfPresentationSize;
+(BOOL)automaticallyNotifiesObserversOfReversePlaybackEndTime;
+(BOOL)automaticallyNotifiesObserversOfSeekableTimeRanges;
+(BOOL)automaticallyNotifiesObserversOfSoundCheckVolumeNormalization;
+(BOOL)automaticallyNotifiesObserversOfStatus;
+(BOOL)automaticallyNotifiesObserversOfTracks;
+(BOOL)automaticallyNotifiesObserversOfVideoComposition;
+(BOOL)automaticallyNotifiesObserversOfVolumeAdjustment;
+(void)initialize;
+(id)playerItemWithAsset:(id)asset;
+(id)playerItemWithURL:(id)url;
-(id)init;
-(id)initWithAsset:(id)asset;
-(id)initWithURL:(id)url;
-(int)_CreateSeekID;
-(id)_URL;
-(void)_addFPListeners;
-(void)_addSyncLayer:(id)layer;
-(BOOL)_alwaysMonitorsPlayability;
-(void)_applyAudioMix;
-(void)_applyInitialAudioMix;
-(void)_applyMediaSelectionOptions;
-(void)_applyTrackSelectionsFromAlternateTrackGroupSPI;
-(void)_attachToPlayer:(id)player forImmediateEnqueueing:(BOOL)immediateEnqueueing shouldAppendItem:(BOOL)item;
-(void)_cacheMediaSelectionOption:(id)option forMediaSelectionGroup:(id)mediaSelectionGroup;
-(id)_cachedValueForKey:(id)key;
-(BOOL)_canPlayFastForward;
-(BOOL)_canPlayFastReverse;
-(int)_cancelPendingSeekAndRegisterSeekCompletionHandler:(id)handler;
-(void)_changeStatusToFailedWithError:(id)error;
-(void)_configurePlaybackItemForPlayerType:(int)playerType;
-(BOOL)_continuesPlayingDuringPrerollForRateChange;
-(BOOL)_continuesPlayingDuringPrerollForSeek;
-(void)_createPlayerConnection:(id)connection shouldAppendItem:(BOOL)item;
-(void)_createPlayerItemInternal;
-(void)_detachFromPlayer;
-(void)_didAccessKVOForKey:(id)key;
-(XXStruct_pwHToB)_duration;
-(OpaqueFigCPEProtector*)_figCPEProtector;
-(OpaqueFigPlaybackItem*)_figPlaybackItem;
-(XXStruct_pwHToB)_forwardPlaybackEndTime;
-(id)_fpNotificationNames;
-(BOOL)_hasEnabledVideoMedia;
-(void)_informObserversAboutAvailabilityOfTracks;
-(void)_insertAfterItem:(id)item;
-(void)_invokeReadyForEnqueueingHandlers;
-(BOOL)_isCurrentPlayerItem;
-(void)_kickAssetObserversIfAppropriate;
-(BOOL)_limitReadAhead;
-(id)_loadedTimeRanges;
-(void)_makeNewAssetWithFigPlaybackItem;
-(void)_makeReadyForEnqueueingWithCompletionHandler:(id)completionHandler;
-(id)_nextItem;
-(id)_playbackItemNotificationPayloadToError:(CFDictionaryRef)error;
-(id)_playbackProperties;
-(id)_player;
-(void)_playerChangeStatusToFailedWithError:(id)error;
-(id)_playerConnection;
-(CGSize)_presentationSize;
-(id)_previousItem;
-(id)_propertyStorage;
-(void)_quietlySetAlwaysMonitorsPlayability:(BOOL)playability;
-(void)_quietlySetContinuesPlayingDuringPrerollForRateChange:(BOOL)rateChange;
-(void)_quietlySetContinuesPlayingDuringPrerollForSeek:(BOOL)seek;
-(void)_quietlySetForwardPlaybackEndTime:(XXStruct_pwHToB)time;
-(void)_quietlySetLimitReadAhead:(BOOL)ahead;
-(void)_quietlySetPlaybackProperties:(id)properties;
-(void)_quietlySetReversePlaybackEndTime:(XXStruct_pwHToB)time;
-(void)_quietlySetSoundCheckVolumeNormalization:(float)normalization;
-(void)_quietlySetVolumeAdjustment:(float)adjustment;
-(void)_removeFPListeners;
-(void)_removeFromItems;
-(void)_removeSyncLayer:(id)layer;
-(void)_respondToBecomingReadyForBasicInspection;
-(XXStruct_pwHToB)_reversePlaybackEndTime;
-(id)_seekableTimeRanges;
-(void)_selectMediaOption:(id)option inAlternateTrackGroup:(id)alternateTrackGroup cacheIfAppropriate:(BOOL)appropriate;
-(void)_selectMediaOption:(id)option inKeyValueGroup:(id)keyValueGroup cacheIfAppropriate:(BOOL)appropriate;
-(void)_selectMediaOption:(id)option inMediaSelectionGroup:(id)mediaSelectionGroup cacheIfAppropriate:(BOOL)appropriate;
-(void)_selectTrackWithID:(int)anId amongTrackIDs:(id)ids;
-(id)_selectedMediaOptionInAlternateTrackGroup:(id)alternateTrackGroup;
-(id)_selectedMediaOptionInKeyValueGroup:(id)keyValueGroup;
-(void)_setAsset:(id)asset;
-(void)_setAssetToAssetWithFigPlaybackItemIfAppropriate;
-(void)_setAssetWithFigPlaybackItem:(id)figPlaybackItem;
-(void)_setEnabledState:(BOOL)state ofTrackID:(int)trackID;
-(void)_setIsCurrentPlayerItem:(BOOL)item;
-(void)_setPlayerConnection:(id)connection;
-(void)_setSyncLayersOnFigPlaybackItem;
-(void)_setTimedMetadata:(id)metadata;
-(void)_setTrackIDsForAssetWithFigPlaybackItem:(id)figPlaybackItem;
-(void)_setURL:(id)url;
-(void)_setVideoCompositionFrameDuration:(XXStruct_pwHToB)duration;
-(void)_setVideoCompositionInstructions:(id)instructions;
-(void)_setVideoCompositionRenderScale:(float)scale;
-(void)_setVideoCompositionRenderSize:(CGSize)size;
-(void)_setVideoCompositor:(id)compositor;
-(dispatch_queue_s*)_stateDispatchQueue;
-(id)_trackWithTrackID:(int)trackID;
-(id)_tracks;
-(id)_unregisterAndReturnRetainedSeekCompletionHandler;
-(id)_weakReference;
-(void)_willAccessKVOForKey:(id)key;
-(void)addObserver:(id)observer forKeyPath:(id)keyPath options:(unsigned)options context:(void*)context;
-(BOOL)alwaysMonitorsPlayability;
-(id)asset;
-(id)audioMix;
-(BOOL)canPlayFastForward;
-(BOOL)canPlayFastReverse;
-(void)cancelPendingSeeks;
-(BOOL)continuesPlayingDuringPrerollForRateChange;
-(BOOL)continuesPlayingDuringPrerollForSeek;
-(id)copyWithZone:(NSZone*)zone;
-(id)currentDate;
-(id)currentEstimatedDate;
-(XXStruct_pwHToB)currentTime;
-(void)dealloc;
-(id)description;
-(void)didChangeValueForKey:(id)key;
-(XXStruct_pwHToB)duration;
// declared property getter: -(id)error;
-(void)finalize;
-(XXStruct_pwHToB)forwardPlaybackEndTime;
-(id)gaplessInfo;
-(id)initialDate;
-(id)initialEstimatedDate;
-(BOOL)isNonForcedSubtitleDisplayEnabled;
-(BOOL)isPlaybackBufferEmpty;
-(BOOL)isPlaybackBufferFull;
-(BOOL)isPlaybackLikelyToKeepUp;
-(BOOL)limitReadAhead;
-(id)loadedTimeRanges;
-(id)playabilityMetrics;
-(CGSize)presentationSize;
-(float)progressTowardsPlaybackLikelyToKeepUp;
-(XXStruct_pwHToB)reversePlaybackEndTime;
-(BOOL)seekToDate:(id)date;
-(void)seekToTime:(XXStruct_pwHToB)time;
-(void)seekToTime:(XXStruct_pwHToB)time completionHandler:(id)handler;
-(void)seekToTime:(XXStruct_pwHToB)time toleranceBefore:(XXStruct_pwHToB)before toleranceAfter:(XXStruct_pwHToB)after;
-(void)seekToTime:(XXStruct_pwHToB)time toleranceBefore:(XXStruct_pwHToB)before toleranceAfter:(XXStruct_pwHToB)after completionHandler:(id)handler;
-(id)seekableTimeRanges;
-(void)selectMediaOption:(id)option inMediaSelectionGroup:(id)mediaSelectionGroup;
-(void)selectTrackWithID:(int)anId inTrackGroup:(id)trackGroup;
-(id)selectedMediaOptionInMediaSelectionGroup:(id)mediaSelectionGroup;
-(int)selectedTrackIDInTrackGroup:(id)trackGroup;
-(void)setAlwaysMonitorsPlayability:(BOOL)playability;
-(void)setAudioMix:(id)mix;
-(void)setContinuesPlayingDuringPrerollForRateChange:(BOOL)rateChange;
-(void)setContinuesPlayingDuringPrerollForSeek:(BOOL)seek;
-(void)setForwardPlaybackEndTime:(XXStruct_pwHToB)time;
-(void)setGaplessInfo:(id)info;
-(void)setInitialDate:(id)date;
-(void)setInitialEstimatedDate:(id)date;
-(void)setLimitReadAhead:(BOOL)ahead;
-(void)setNonForcedSubtitleDisplayEnabled:(BOOL)enabled;
-(void)setReversePlaybackEndTime:(XXStruct_pwHToB)time;
-(void)setSoundCheckVolumeNormalization:(float)normalization;
-(void)setVideoComposition:(id)composition;
-(void)setVolumeAdjustment:(float)adjustment;
-(float)soundCheckVolumeNormalization;
// declared property getter: -(int)status;
-(void)stepByCount:(int)count;
-(id)timedMetadata;
-(id)tracks;
-(id)valueForUndefinedKey:(id)undefinedKey;
-(id)videoComposition;
-(float)volumeAdjustment;
-(void)willChangeValueForKey:(id)key;
@end

@interface AVPlayerItem (AVPlayerItemProtectedContent)
@property(readonly, assign, nonatomic, getter=isApplicationAuthorizedForPlayback) BOOL applicationAuthorizedForPlayback;
@property(readonly, assign, nonatomic, getter=isAuthorizationRequiredForPlayback) BOOL authorizationRequiredForPlayback;
@property(readonly, assign, nonatomic, getter=isContentAuthorizedForPlayback) BOOL contentAuthorizedForPlayback;
// declared property getter: -(BOOL)isApplicationAuthorizedForPlayback;
// declared property getter: -(BOOL)isAuthorizationRequiredForPlayback;
// declared property getter: -(BOOL)isContentAuthorizedForPlayback;
@end

@interface AVPlayerItem (AVPlayerItemProtectedContentPrivate)
@property(assign, nonatomic, getter=_isExternalProtectionRequiredForPlayback, setter=_setExternalProtectionRequiredForPlayback:) BOOL _externalProtectionRequiredForPlayback;
@property(readonly, assign, nonatomic, getter=_isRental) BOOL _rental;
@property(readonly, assign, nonatomic) NSDate* _rentalExpirationDate;
@property(readonly, assign, nonatomic) NSDate* _rentalPlaybackExpirationDate;
@property(readonly, assign, nonatomic, getter=_isRentalPlaybackStarted) BOOL _rentalPlaybackStarted;
@property(readonly, assign, nonatomic) NSDate* _rentalPlaybackStartedDate;
@property(readonly, assign, nonatomic) NSDate* _rentalStartDate;
+(id)_initializeProtectedContentPlaybackSupportSessionAsynchronouslyForProvider:(id)provider withOptions:(id)options;
+(void)_uninitializeProtectedContentPlaybackSupportSession:(id)session;
// declared property getter: -(BOOL)_isExternalProtectionRequiredForPlayback;
// declared property getter: -(BOOL)_isRental;
// declared property getter: -(BOOL)_isRentalPlaybackStarted;
// declared property getter: -(id)_rentalExpirationDate;
// declared property getter: -(id)_rentalPlaybackExpirationDate;
// declared property getter: -(id)_rentalPlaybackStartedDate;
// declared property getter: -(id)_rentalStartDate;
// declared property setter: -(void)_setExternalProtectionRequiredForPlayback:(BOOL)playback;
@end

@interface AVPlayerItem (AVPlayerItemLogging)
-(id)accessLog;
-(id)errorLog;
@end

@interface AVPlayerItem (AVPlayerItemSupportForMediaPlayer)
-(long long)_availableFileSize;
-(long long)_fileSize;
-(void)_quietlySetEQPreset:(int)preset;
-(void)_setAudibleDRMInfo:(id)info;
-(void)_setEQPreset:(int)preset;
-(void)_setRampInOutInfo:(id)outInfo;
@end

@interface AVPlayerItem (AVPlayerItemDataYouTubeID_Private)
@property(copy, nonatomic) NSString* dataYouTubeID;
// declared property getter: -(id)dataYouTubeID;
// declared property setter: -(void)setDataYouTubeID:(id)anId;
@end

@interface AVPlayerItem (AVPlayerItemExternalSubtitles_Private)
@property(readonly, assign, nonatomic) BOOL canDisplayExternalSubtitles;
@property(assign, nonatomic) BOOL displaysExternalSubtitles;
// declared property getter: -(BOOL)canDisplayExternalSubtitles;
-(void)displayExternalSubtitleString:(id)string forced:(BOOL)forced;
// declared property getter: -(BOOL)displaysExternalSubtitles;
// declared property setter: -(void)setDisplaysExternalSubtitles:(BOOL)subtitles;
@end

